{"version":3,"sources":["hooks/useToggle.ts","components/Editor/index.tsx","hooks/useLocaleStorage.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useToggle","initialValue","useState","isOpen","setIsOpen","toggle","Editor","displayName","language","value","onChange","editorOptions","lineWrapping","lint","mode","theme","lineNumbers","rootClassName","join","className","onClick","onBeforeChange","_editor","_data","options","useLocaleStorage","key","prefixedKey","concat","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAeeA,G,oCAbG,WAA2B,IAA1BC,EAAyB,wDAC1C,EAA4BC,mBAASD,GAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEMC,EAAS,WACbD,GAAU,SAAAD,GAAM,OAAKA,MAGvB,MAAO,CACLA,SACAE,Y,OC4CWC,EAjCW,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACzD,EAA2BV,GAAU,GAA7BG,EAAR,EAAQA,OAAQE,EAAhB,EAAgBA,OAMVM,EAAgB,CACpBC,cAAc,EACdC,MAAM,EACNC,KAAMN,EACNO,MAAO,WACPC,aAAa,GAGTC,EAAgB,CAAC,oBAAD,mBAAyBd,EAAS,GAAK,CAAC,eAAee,KAAK,KAElF,OACE,sBAAKC,UAAWF,EAAhB,UACE,sBAAKE,UAAU,eAAf,UACGZ,EACD,wBAAQa,QAASf,EAAjB,qBAEF,cAAC,aAAD,CACEc,UAAU,sBACVE,eAtBe,SAACC,EAAcC,EAAYd,GAC9CC,EAASD,IAsBLA,MAAOA,EACPe,QAASb,QCzBFc,EApBU,SAACC,EAAazB,GACrC,IAAM0B,EAHO,sBAGcC,OAAOF,GAElC,EAA0BxB,oBAAS,WACjC,IAAM2B,EAAYC,aAAaC,QAAQJ,GAEvC,OAAiB,MAAbE,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjB5B,EAAoCA,IAExCA,KAPT,mBAAOQ,EAAP,KAAcyB,EAAd,KAcA,OAJAC,qBAAU,WACRL,aAAaM,QAAQT,EAAaK,KAAKK,UAAU5B,MAChD,CAACkB,EAAalB,IAEV,CAACA,EAAOyB,IC8CFI,G,MA3DC,WACd,MAAwBb,EAAiB,OAAQ,IAAjD,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAiB,MAAO,IAA9C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoBjB,EAAiB,KAAM,IAA3C,mBAAOkB,EAAP,KAAWC,EAAX,KAEA,EAA4B1C,mBAAS,IAArC,mBAAO2C,EAAP,KAAeC,EAAf,KAkBA,OAhBAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,WACLM,aAAaF,MAEd,CAACR,EAAME,EAAKE,IAGb,sBAAKxB,UAAU,MAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CACEX,SAAS,MACTD,YAAY,OACZE,MAAO8B,EACP7B,SAAU8B,IAEZ,cAAC,EAAD,CACEhC,SAAS,MACTD,YAAY,MACZE,MAAOgC,EACP/B,SAAUgC,IAEZ,cAAC,EAAD,CACElC,SAAS,aACTD,YAAY,KACZE,MAAOkC,EACPjC,SAAUkC,OAGd,qBAAKzB,UAAU,OAAf,SACE,wBACE0B,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,gBC9CFC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1c34596f.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useToggle = (initialValue = false) => {\n  const [isOpen, setIsOpen] = useState(initialValue);\n\n  const toggle = () => {\n    setIsOpen(isOpen => !isOpen);\n  };\n\n  return {\n    isOpen,\n    toggle,\n  };\n};\n\nexport default useToggle;\n","import { FC } from 'react';\n\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\n\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\n\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/javascript/javascript';\n\nimport 'components/Editor/index.css';\n\nimport useToggle from 'hooks/useToggle';\n\ninterface Props {\n  displayName: 'HTML' | 'CSS' | 'JS';\n  language: 'xml' | 'css' | 'javascript';\n  value: string;\n  onChange: (value: string) => void;\n}\n\nconst Editor: FC<Props> = ({ displayName, language, value, onChange }) => {\n  const { isOpen, toggle } = useToggle(true);\n\n  const handleChange = (_editor: any, _data: any, value: string) => {\n    onChange(value);\n  };\n\n  const editorOptions = {\n    lineWrapping: true,\n    lint: true,\n    mode: language,\n    theme: 'material',\n    lineNumbers: true,\n  };\n\n  const rootClassName = ['editor-container', ...(isOpen ? [] : ['collapsed'])].join(' ')\n\n  return (\n    <div className={rootClassName}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button onClick={toggle}>O\\C</button>\n      </div>\n      <ControlledEditor \n        className=\"code-mirror-wrapper\"\n        onBeforeChange={handleChange}\n        value={value}\n        options={editorOptions}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","import { useState, useEffect } from 'react';\n\nconst PREFIX = 'online-code-editor-';\n\nconst useLocaleStorage = (key: string, initialValue: any) => {\n  const prefixedKey = PREFIX.concat(key);\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n\n    if (jsonValue != null) return JSON.parse(jsonValue);\n\n    if (typeof initialValue === 'function') return initialValue();\n\n    return initialValue;\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n};\n\nexport default useLocaleStorage;\n","import { FC, useState, useEffect } from 'react';\n\nimport Editor from 'components/Editor';\n\nimport useLocaleStorage from 'hooks/useLocaleStorage';\n\nimport 'App.css';\n\nconst App: FC = () => {\n  const [html, setHtml] = useLocaleStorage('html', '');\n  const [css, setCss] = useLocaleStorage('css', '');\n  const [js, setJs] = useLocaleStorage('js', '');\n\n  const [srcDoc, setSrcDoc] = useState('');\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n        <html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>\n      `);\n    }, 250);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [html, css, js]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"pane top-pane\">\n        <Editor\n          language=\"xml\"\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n        />\n        <Editor\n          language=\"css\"\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n        />\n        <Editor\n          language=\"javascript\"\n          displayName=\"JS\"\n          value={js}\n          onChange={setJs}\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          srcDoc={srcDoc}\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          frameBorder=\"0\"\n          width=\"100%\"\n          height=\"100%\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'index.css';\nimport App from 'App';\nimport reportWebVitals from 'reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}